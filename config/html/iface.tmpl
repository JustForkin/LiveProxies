        <div id="page-wrapper">
            <div class="container-fluid">
                <!-- Page Heading -->
                <div class="row">
                    <div class="col-lg-12">
                        <h1 class="page-header">Checked proxies (<span id="countProxies">{T_COUNT_PROXIES}</span>)</h1>
                    </div>
                </div>
		<script src="/js/jsbn.js"></script>
		<script src="/js/jsbn2.js"></script>
		<script>
			$(document).ready(function() {
				var tb = $('#tableActive').find('tbody');
				
				function GetUInt64(bs, offset) {
					var low = bs.getUint32(offset);
					var high = bs.getUint32(offset + 4);
					
					var biLow = new BigInteger(low.toString(), 10);
					biLow.lShiftTo(32, biLow);
					var ret = new BigInteger(high.toString(), 10).add(biLow);
					return ret;
				}
				
				var lastChange = Date.now();
				var lastFadeUpdate = Date.now();
				var update = function() {
					if (lastChange + 5000 < Date.now()) {
						window.table.draw(false);
					}
				}
				var updateLoop = function() { update(); setTimeout(updateLoop, 5000); };
				updateLoop();
				
				WSInitialize({T_SUB_PROXY_ADD} | {T_SUB_PROXY_REMOVE}, "{T_SUB_AUTH_COOKIE}", function(sub, data) {
					var bs = new DataView(data);
					switch (sub) {
						case {T_SUB_PROXY_ADD}:
							var ipType = bs.getUint8(0);
							var offset;
							var ipData;
							if (ipType == 0x04) {
								ipData = data.slice(1, 5);
								offset = 5;
							} else {
								ipData = data.slice(1, 17);
								offset = 17;
							}
							var port = bs.getUint16(offset);
							var type = bs.getUint16(offset + 2);
							var countryMap = new Int8Array(data.slice(offset + 4));
							var country = String.fromCharCode(countryMap[0], countryMap[1]);
							var anon = bs.getUint8(offset + 6);
							var timeoutMs = GetUInt64(bs, offset + 7);
							var httpTimeoutMs = GetUInt64(bs, offset + 15);
							var liveSinceMs = GetUInt64(bs, offset + 23);
							var lastCheckedMs = GetUInt64(bs, offset + 31);
							var retries = bs.getUint8(offset + 39);
							var successfulChecks = bs.getUint32(offset + 40);
							var failedChecks = bs.getUint32(offset + 44);
							var uidMap = new Int8Array(data.slice(offset + 48, data.length));
							var uid = "";
							for (var x = 0;x < uidMap.length;x++) {
								uid += String.fromCharCode(uidMap[x]);
							}
							
							var ip = IPParse(ipData, ipType);
												
							// var even = $('#tableActive > tbody:last-child tr:last:odd').length == 0;
							
							var row = $('#tableActive > tbody:last-child').append(
								"<tr class=\"" +
									(anon == 1 ? "{T_CFG_TABLE_ERR}" : (anon == 2 ? "{T_CFG_TABLE_WARN}" : "{T_CFG_TABLE_OK}")) +
									/*(even ? "{T_CFG_TABLE_ODD}" : "{T_CFG_TABLE_EVEN}")*/ /* Adds automatically */
								"\">" +
									"<td>" + (ipType == 0x04 ? ip : ("[" + ip + "]")) + ":" + port + "</td>" +
									"<td>" + ProxyTypeString(type) + "</td>" +
									"<td>" + country + "</td>" +
									"<td>" + ProxyAnonymityString(anon) + "</td>" +
									"<td>" + timeoutMs.toString() + "</td>" +
									"<td>" + httpTimeoutMs.toString() + "</td>" +
									"<td>" + FormatTime(liveSinceMs.toString()) + "</td>" +
									"<td>" + FormatTime(lastCheckedMs.toString()) + "</td>" +
									"<td>" + retries + "</td>" +
									"<td>" + successfulChecks + "</td>" +
									"<td>" + failedChecks + "</td>" +
									"<td><a href=\"/recheck?uid=" + uid + "\">Check</a>" + "</td>" +
								"</tr>"
							).find("tr:last");
							
							if (lastFadeUpdate + {T_SUB_MSG_INTERVAL} < Date.now()) {
								var nodes = $(window.table.row.add(row).node()).find("td");
								nodes.fadeUpdate(nodes.css('background-color'), {T_SUB_MSG_INTERVAL}, true);
								lastFadeUpdate = Date.now();
							} else
								window.table.row.add(row);
							
							var cp = $('#countProxies');
							cp.text(parseInt(cp.text()) + 1);
						break;
						case {T_SUB_PROXY_REMOVE}:
							var ipType = bs.getUint8(0);
							var offset;
							var ipData;
							if (ipType == 0x04) {
								ipData = data.slice(1, 5);
								offset = 5;
							} else {
								ipData = data.slice(1, 17);
								offset = 17;
							}
							var port = bs.getUint16(offset);
							var type = bs.getUint16(offset + 2);
							
							var ip = IPParse(ipData, ipType);
							
							var nodes = $(window.table.rows().nodes());
							for (var x = 0;x < nodes.length;x++) {
								var td = $(nodes[x]).find("td");
								if (td[0].innerText == (ipType == 0x04 ? ip : ("[" + ip + "]")) + ":" + port && td[1].innerText == ProxyTypeString(type)) {
									nodes[x].remove().draw("page");
									var cp = $('#countProxies');
									cp.text(parseInt(cp.text()) - 1);
									return;
								}
							}
							console.log("PROXY NOT FOUND! (" + ip + ":" + port + ")");
						break;
					}
				});
			});
		</script>
                <div class="row">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <!-- /.panel-heading -->
                        <div class="panel-body">
                            <div class="dataTable_wrapper">
                                <table class="table table-striped table-bordered table-hover" id="tableActive">
                                    <thead>
                                        <tr>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                            <th>{T_PROXIES_HEAD}</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {T_PROXIES_TABLE_ITEMS_START}
                                        <tr class="{T_CFG_TABLE_ODD}{T_CFG_TABLE_EVEN}{T_CFG_TABLE_OK}{T_CFG_TABLE_WARN}{T_CFG_TABLE_ERR}">
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                            <td>{T_PROXIES_ITEM}</td>
                                        </tr>
                                        {T_PROXIES_TABLE_ITEMS_END}
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.table-responsive -->
                        </div>
                        <!-- /.panel-body -->
                    </div>
                    <!-- /.panel -->
                </div>
                <!-- /.col-lg-12 -->
            </div>
            <!-- /.row -->
            </div>
            <!-- /.container-fluid -->
        </div>
        <!-- /#page-wrapper -->
